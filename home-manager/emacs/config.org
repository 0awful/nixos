#+TITLE: Just an Emacs Config
#+AUTHOR: Izaac
#+DESCRIPTION: Yoinked from DT's personal Emacs config. Built into this.
#+STARTUP: showeverything
#+OPTIONS: toc:2
* TABLE OF CONTENTS :toc:
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#load-evil-mode][Load Evil Mode]]
  - [[#general-keybindings][General Keybindings]]
  - [[#custom-k-behavior][Custom K behavior]]
  - [[#custom-c-u][Custom C-u]]
  - [[#buffer-move][Buffer move]]
  - [[#clipboard-etiquette][Clipboard etiquette]]
- [[#all-the-icons][All The Icons]]
- [[#avy][Avy]]
- [[#fonts][FONTS]]
- [[#graphical-user-interface-tweaks][GRAPHICAL USER INTERFACE TWEAKS]]
  - [[#gruvbox-theme][Gruvbox Theme]]
  - [[#disable-menubar-toolbars-and-scrollbars][Disable Menubar, Toolbars and Scrollbars]]
  - [[#display-line-numbers-and-truncated-lines][Display Line Numbers and Truncated Lines]]
- [[#org-mode][ORG MODE]]
  - [[#org-mode-tab-in-which-key][Org mode tab in which-key]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#org-tempo-better-src-block-input][Org Tempo (better src block input)]]
  - [[#org-tempo-custom-templates][Org tempo custom templates]]
  - [[#org-mode-indent-fix][Org mode indent fix]]
  - [[#better-gruvbox-org-mode][Better gruvbox org mode]]
  - [[#org-roam][Org-Roam]]
  - [[#org-excalidraw][Org Excalidraw]]
- [[#which-key][WHICH-KEY]]
- [[#sudo-edit][SUDO EDIT]]
- [[#vertico-and-friends][Vertico and Friends]]
  - [[#vertico][Vertico]]
  - [[#orderless][Orderless]]
  - [[#marginalia][Marginalia]]
  - [[#embark][Embark]]
- [[#languages][Languages]]
  - [[#lsp-mode][Lsp-mode]]
  - [[#treesitter][Treesitter]]
  - [[#nix][Nix]]

* IMPORTANT PROGRAMS TO LOAD FIRST
** Load Evil Mode
#+begin_src emacs-lisp :tangle yes
  (use-package evil
      :ensure t
      :init      ;; tweak evil's configuration before loading it
      (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
      (setq evil-want-keybinding nil)
      (setq evil-vsplit-window-right t)
      (setq evil-split-window-below t)
  (evil-mode))
  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer))
    (evil-collection-init))
#+end_src

** General Keybindings

#+begin_src emacs-lisp :tangle yes
     (use-package general
        :ensure t
       :config
       (general-evil-setup))

       ;; set up 'SPC' as the global leader key
       (general-create-definer bb-leader-key
         :states '(normal insert visual emacs)
         :keymaps 'override
         :prefix "SPC" ;; set leader
         :global-prefix "M-SPC") ;; access leader in insert mode

       (bb-leader-key
         "." '(find-file :wk "Find File")
   ;; "l r" '(counsel-recentf :wk "Find recent files")
         "TAB TAB" '(comment-line :wk "Comment Lines"))

       (bb-leader-key
         "b" '(:ignore t :wk "buffer")
         "b b" '(switch-to-buffer :wk "Switch buffer")
         "b i" '(ibuffer :wk "Ibuffer")
         "b k" '(kill-this-buffer :wk "Kill this buffer")
         "b n" '(next-buffer :wk "Next buffer")
         "b p" '(previous-buffer :wk "Previous buffer")
         "b r" '(revert-buffer :wk "Reload buffer"))

  (bb-leader-key
  "t" '(:ignore t :wk "toggle")
  "t t" '(visual-line-mode :wk "toggle truncated lines"))

       (bb-leader-key
         "e" '(:ignore t :wk "Eval")
         "e b" '(eval-buffer :wk "Eval elisp in buffer")
         "e d" '(eval-defun :wk "Eval defun containing or after point")
         "e e" '(eval-expression :wk "Eval and elisp expression")
         "e l" '(eval-last-sexp :wk "Eval elisp expression before point")
         "e r" '(eval-region :wk "Eval elisp in region"))

     (bb-leader-key
     "h" '(:ignore t :wk "Help")
     "h f" '(describe-function :wk "Describe function")
     "h v" '(describe-variable :wk "Describe variable"))

   (bb-leader-key
   "w" '(:ignore t :wk "Windows")
   ;; Splits
   "w c" '(evil-window-delete :wk "Close window")
   "w n" '(evil-window-new :wk "New window")
   "w s" '(evil-window-split :wk "Horizontal window split")
   "w v" '(evil-window-vsplit :wk "Vertical window split")
   ;; Moves
   "w h" '(evil-window-left :wk "Window left")
   "w l" '(evil-window-right :wk "Window right")
   "w k" '(evil-window-up :wk "Window up")
   "w j" '(evil-window-down :wk "Window down")
   "w w" '(evil-window-next :wk "Goto next window")
   ;; Move Windows
   "w H" '(buf-move-left :wk "Move window left") "w L" '(buf-move-right :wk "Move window right")
   "w K" '(buf-move-up :wk "Move window up")
   "w J" '(buf-move-down :wk "Move window down")
   )

#+end_src
** Custom K behavior
#+begin_src emacs-lisp :tangle yes
    (defun my/custom-evil-lookup ()
      (interactive)
      (cond
       ((eq major-mode 'org-mode)
        (if (org-in-regexp org-link-any-re)
    	(org-open-at-point)
          (when (fboundp 'lsp-find-definition))))
       (t
        (when (fboundp 'lsp-find-definition)
          (lsp-find-definition)))))

      (define-key evil-normal-state-map (kbd "K")
  		'my/custom-evil-lookup)
#+end_src

** Custom C-u
#+begin_src emacs-lisp :tangle yes
;; Make C-u consistently scroll up in all evil modes
(with-eval-after-load 'evil
  ;; Unbind C-u from universal-argument
  (global-set-key (kbd "C-u") nil)

  ;; Bind C-u to evil-scroll-up in all states
  (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
  (define-key evil-visual-state-map (kbd "C-u") 'evil-scroll-up)
  (define-key evil-insert-state-map (kbd "C-u") 'evil-scroll-up)
  (define-key evil-motion-state-map (kbd "C-u") 'evil-scroll-up)
  (define-key evil-emacs-state-map (kbd "C-u") 'evil-scroll-up))

;; Optional: remap universal-argument to something else if you still need it
;; (global-set-key (kbd "C-M-u") 'universal-argument)
#+end_src

** Buffer move
#+begin_src emacs-lisp :tangle yes
;;; buffer-move.el --- easily swap buffers

;; Copyright (C) 2004-2014  Lucas Bonnet <lucas@rincevent.net>
;; Copyright (C) 2014  Mathis Hofer <mathis@fsfe.org>
;; Copyright (C) 2014-2015  Geyslan G. Bem <geyslan@gmail.com>

;; Authors: Lucas Bonnet <lucas@rincevent.net>
;;          Mathis Hofer <mathis@fsfe.org>
;;          Geyslan G. Bem <geyslan@gmail.com>
;; URL: https://github.com/lukhas/buffer-move/
;; Version: 0.6.3
;; Package-Requires: ((emacs "24.1"))
;; Keywords: convenience

;; This file is NOT part of GNU Emacs.

;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:
;;
;; This file is for lazy people wanting to swap buffers without
;; typing C-x b on each window. This is useful when you have :
;;
;; +--------------+-------------+
;; |              |             |
;; |    #emacs    |    #gnus    |
;; |              |             |
;; +--------------+-------------+
;; |                            |
;; |           .emacs           |
;; |                            |
;; +----------------------------+
;;
;; and you want to have :
;;
;; +--------------+-------------+
;; |              |             |
;; |    #gnus     |   .emacs    |
;; |              |             |
;; +--------------+-------------+
;; |                            |
;; |           #emacs           |
;; |                            |
;; +----------------------------+
;;
;; With buffer-move, just go in #gnus, do buf-move-left, go to #emacs
;; (which now should be on top right) and do buf-move-down.
;;
;; To use it, simply put a (require 'buffer-move) in your ~/.emacs and
;; define some keybindings. For example, i use :
;;
;; (global-set-key (kbd "<C-S-up>")     'buf-move-up)
;; (global-set-key (kbd "<C-S-down>")   'buf-move-down)
;; (global-set-key (kbd "<C-S-left>")   'buf-move-left)
;; (global-set-key (kbd "<C-S-right>")  'buf-move-right)
;;
;; Alternatively, you may let the current window switch back to the previous
;; buffer, instead of swapping the buffers of both windows. Set the
;; following customization variable to 'move to activate this behavior:
;;
;; (setq buffer-move-behavior 'move)

;;; Code:

(require 'windmove)

(defconst buffer-move-version "0.6.3"
  "Version of buffer-move.el")

(defgroup buffer-move nil
  "Swap buffers without typing C-x b on each window"
  :group 'tools)

(defcustom buffer-move-behavior 'swap
  "If set to 'swap (default), the buffers will be exchanged
  (i.e. swapped), if set to 'move, the current window is switch back to the
  previously displayed buffer (i.e. the buffer is moved)."
  :group 'buffer-move
  :type 'symbol)

(defcustom buffer-move-stay-after-swap nil
  "If set to non-nil, point will stay in the current window
  so it will not be moved when swapping buffers. This setting
  only has effect if `buffer-move-behavior' is set to 'swap."
  :group 'buffer-move
  :type 'boolean)

(defun buf-move-to (direction)
  "Helper function to move the current buffer to the window in the given
   direction (with must be 'up, 'down', 'left or 'right). An error is
   thrown, if no window exists in this direction."
  (cl-flet ((window-settings (window)
              (list (window-buffer window)
                    (window-start window)
                    (window-hscroll window)
                    (window-point window)))
            (set-window-settings (window settings)
              (cl-destructuring-bind (buffer start hscroll point)
                  settings
                (set-window-buffer window buffer)
                (set-window-start window start)
                (set-window-hscroll window hscroll)
                (set-window-point window point))))
    (let* ((this-window (selected-window))
           (this-window-settings (window-settings this-window))
           (other-window (windmove-find-other-window direction))
           (other-window-settings (window-settings other-window)))
      (cond ((null other-window)
             (error "No window in this direction"))
            ((window-dedicated-p other-window)
             (error "The window in this direction is dedicated"))
            ((window-minibuffer-p other-window)
             (error "The window in this direction is the Minibuffer")))
      (set-window-settings other-window this-window-settings)
      (if (eq buffer-move-behavior 'move)
          (switch-to-prev-buffer this-window)
        (set-window-settings this-window other-window-settings))
      (select-window other-window))))

;;;###autoload
(defun buf-move-up ()
  "Swap the current buffer and the buffer above the split.
   If there is no split, ie now window above the current one, an
   error is signaled."
  (interactive)
  (buf-move-to 'up))

;;;###autoload
(defun buf-move-down ()
  "Swap the current buffer and the buffer under the split.
   If there is no split, ie now window under the current one, an
   error is signaled."
  (interactive)
  (buf-move-to 'down))

;;;###autoload
(defun buf-move-left ()
  "Swap the current buffer and the buffer on the left of the split.
   If there is no split, ie now window on the left of the current
   one, an error is signaled."
  (interactive)
  (buf-move-to 'left))

;;;###autoload
(defun buf-move-right ()
  "Swap the current buffer and the buffer on the right of the split.
   If there is no split, ie now window on the right of the current
   one, an error is signaled."
  (interactive)
  (buf-move-to 'right))

;;;###autoload
(defun buf-move ()
  "Begin moving the current buffer to different windows.

Use the arrow keys to move in the desired direction.  Pressing
any other key exits this function."
  (interactive)
  (let ((map (make-sparse-keymap)))
    (dolist (x '(("<up>" . buf-move-up)
                 ("<left>" . buf-move-left)
                 ("<down>" . buf-move-down)
                 ("<right>" . buf-move-right)))
      (define-key map (read-kbd-macro (car x)) (cdr x)))
    (set-transient-map map t)))
#+end_src

** Clipboard etiquette
| action                  | command |
| Copy to system keyboard | "+y     |
| Paste from system keyboard | "+p |
| Cut to system keyboard | "+d |
#+begin_src emacs-lisp :tangle yes
  (setq select-enable-clipboard nil)  ;; Prevents automatic clipboard copy
  (setq select-enable-primary nil)    ;; Stops Emacs from using primary selection

  (setq evil-visual-update-x-selection nil) ;; Visual selection doesn't go to clipboard by default
#+end_src
* All The Icons
The icon set that is all the icons

#+begin_src emacs-lisp :tangle yes
    (use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

  (use-package all-the-icons-dired
      :ensure t
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

* Avy
[See this article about getting more out of it](https://karthinks.com/software/avy-can-do-anything/
#+begin_src emacs-lisp :tangle yes
    (use-package avy
      :ensure t
    :config
         (bb-leader-key
           "f" '(:ignore t :wk "jump")
           "f f" '(avy-goto-char-timer :wk "Avy goto")
           "f l" '(avy-goto-line :wk "Avy goto line")
           "f w" '(avy-goto-word-2 :wk "Avy goto word")
           "f c" '(avy-goto-char-2 :wk "Avy goto char")
  )
  )
#+end_src

* FONTS
Defining the various fonts that Emacs will use.

#+begin_src emacs-lisp :tangle yes
  (set-face-attribute 'default nil
    :font "Lekton Nerd Font"
    :height 110
    :weight 'medium)
  (set-face-attribute 'variable-pitch nil
    :font "NotoSans NF SemCond ExtLt"
    :height 130
    :weight 'extra-light)
  (set-face-attribute 'fixed-pitch nil
    :font "Lekton Nerd Font"
    :height 110
    :weight 'medium)
  ;; Makes commented text and keywords italics.
  ;; This is working in emacsclient but not emacs.
  ;; Your font must have an italic face available.
  (set-face-attribute 'font-lock-comment-face nil
    :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
    :slant 'italic)

  ;; This sets the default font on all graphical frames created after restarting Emacs.
  ;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
  ;; are not right unless I also add this method of setting the default font.
  (add-to-list 'default-frame-alist '(font . "NotoSans NF SemCond ExtLt"))

  ;; Uncomment the following line if line spacing needs adjusting.
  (setq-default line-spacing 0.12)

#+end_src

* GRAPHICAL USER INTERFACE TWEAKS
Let's make GNU Emacs look a little better.
** Gruvbox Theme
#+begin_src emacs-lisp :tangle yes
(use-package gruvbox-theme
  :ensure t
  :config
  (load-theme 'gruvbox-dark-hard t))
#+end_src

** Disable Menubar, Toolbars and Scrollbars
#+begin_src emacs-lisp :tangle yes
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

** Display Line Numbers and Truncated Lines
#+begin_src emacs-lisp :tangle yes
(global-display-line-numbers-mode 1)
(global-visual-line-mode t)
#+end_src
* ORG MODE
** Org mode tab in which-key
#+begin_src  emacs-lisp :tangle yes
(bb-leader-key
      "o" '(:ignore t :wk "Org")
)
#+end_src
** Enabling Table of Contents
#+begin_src emacs-lisp :tangle yes
  (use-package toc-org
      :ensure t
      :commands toc-org-enable
      :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Enabling Org Bullets
Org-bullets gives us attractive bullets rather than asterisks.

#+begin_src emacs-lisp :tangle yes
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets
      :ensure t
)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Org Tempo (better src block input)
#+begin_src emacs-lisp :tangle yes
  (require 'org-tempo)
#+end_src
** Org tempo custom templates

#+begin_src emacs-lisp :tangle yes
      (with-eval-after-load 'org-tempo
      (add-to-list 'org-structure-template-alist '("se" . "src emacs-lisp :tangle yes"))
    ;; rust
      (add-to-list 'org-structure-template-alist '("sr" . "src rust"))
      (add-to-list 'org-structure-template-alist '("er" . "example rust"))
  ;; js
      (add-to-list 'org-structure-template-alist '("sj" . "src js"))
      (add-to-list 'org-structure-template-alist '("ej" . "example js"))
    ;; svelte
      (add-to-list 'org-structure-template-alist '("ss" . "src svelte"))
      (add-to-list 'org-structure-template-alist '("es" . "example svelte"))
    )
#+end_src
** Org mode indent fix
#+begin_src emacs-lisp :tangle yes
  (electric-indent-mode -1)
#+end_src

** Better gruvbox org mode
Stolen from [Thriveth](https://github.com/thriveth/Gruvbox-goodies/blob/master/Emacs/gruvbox-conf.el)
#+begin_src emacs-lisp :tangle yes
  (use-package gruvbox-theme
    :ensure t
    :config
    (progn
      (defvar after-load-theme-hook nil
        "Hook run after a color theme is loaded using `load-theme'.")
      (defadvice load-theme (after run-after-load-theme-hook activate)
        "Run `after-load-theme-hook'."
        (run-hooks 'after-load-theme-hook))
      (defun customize-gruvbox ()
        "Customize gruvbox theme"
        (if (member 'gruvbox custom-enabled-themes)
            (custom-theme-set-faces
             'gruvbox
             '(cursor                 ((t (:foreground "#928374"))))
             '(org-block              ((t (:foreground "#ebdbb2":background "#1c2021" :extend t))))
             '(org-block-begin-line   ((t (:inherit org-block :background "#1d2021" :foreground "#665c54" :extend t))))
             '(org-block-end-line     ((t (:inherit org-block-begin-line))))
             '(org-document-info      ((t (:foreground "#d5c4a1" :weight bold))))
             '(org-document-info-keyword    ((t (:inherit shadow))))
             '(org-document-title     ((t (:foreground "#fbf1c7" :weight bold :height 1.4))))
             '(org-meta-line          ((t (:inherit shadow))))
             '(org-target             ((t (:height 0.7 :inherit shadow))))
             '(org-link               ((t (:foreground "#b8bb26" :background "#32302f" :overline nil))))  ;;
             '(org-indent             ((t (:inherit org-hide))))
             '(org-indent             ((t (:inherit (org-hide fixed-pitch)))))
             '(org-footnote           ((t (:foreground "#8ec07c" :background "#32302f" :overline nil))))
             '(org-ref-cite-face      ((t (:foreground "#fabd2f" :background "#32302f" :overline nil))))  ;;
             '(org-ref-ref-face       ((t (:foreground "#83a598" :background "#32302f" :overline nil))))
             '(org-ref-label-face     ((t (:inherit shadow :box t))))
             '(org-drawer             ((t (:inherit shadow))))
             '(org-property-value     ((t (:inherit org-document-info))) t)
             '(org-tag                ((t (:inherit shadow))))
             '(org-date               ((t (:foreground "#83a598" :underline t))))
             '(org-verbatim           ((t (:inherit org-block :background "#3c3836" :foreground "#d5c4a1"))))
             '(org-code               ((t (:inherit org-verbatim :background "#3c3836" :foreground "#fe8019"))))
             '(org-quote              ((t (:inherit org-block :slant italic))))
             '(org-level-1            ((t (:foreground "#83a598" :background "#282828" :weight bold :height 1.1 :overline nil :extend t)))) ;; Blue
             '(org-level-2            ((t (:foreground "#8ec07c" :background "#282828" :weight bold :height 1.1 :overline nil :extend t)))) ;; Aqua
             '(org-level-3            ((t (:foreground "#b8bb26" :background "#282828" :weight bold :height 1.1 :overline nil :extend t)))) ;; Green
             '(org-level-4            ((t (:foreground "#fabd2f" :background "#282828" :weight bold :height 1.1 :overline nil :extend t)))) ;; Yellow
             '(org-level-5            ((t (:foreground "#fe8019" :background "#282828" :weight bold :height 1.1 :overline nil :extend t)))) ;; Orange
             '(org-level-6            ((t (:foreground "#fb4934" :background "#282828" :weight bold :height 1.1 :overline nil :extend t)))) ;; Red
             '(org-level-7            ((t (:foreground "#d3869b" :background "#282828" :weight bold :height 1.1 :overline nil :extend t)))) ;; Blue
             '(org-headline-done      ((t (:foreground "#928374" :background "#282828" :weight bold :overline nil :extend t)))) ;; Gray
             '(org-ellipsis           ((t (:inherit shadow :height 1.0 :weight bold :extend t))))
             '(org-table              ((t (:foreground "#d5c4a1" :background "#3c3836"))))

             ;; Doom-modeline settings
             '(doom-modeline-evil-insert-state   ((t (:foreground "#b8bb26" :weight bold)))) ;; Green
             '(doom-modeline-evil-emacs-state    ((t (:foreground "#b16286" :weight bold)))) ;; Purple
             '(doom-modeline-evil-normal-state   ((t (:foreground "#83a598" :weight bold)))) ;; Blue
             '(doom-modeline-evil-visual-state   ((t (:foreground "#fbf1c7" :weight bold)))) ;; Beige
             '(doom-modeline-evil-replace-state  ((t (:foreground "#fb4934" :weight bold)))) ;; Red
             '(doom-modeline-evil-operator-state ((t (:foreground "#fabd2f" :weight bold)))) ;; Yellow
             '(mode-line                         ((t (:background "#504945" :foreground "#d5c4a1"))))
             '(mode-line-inactive                ((t (:background "#3c3836" :foreground "#7c6f64"))))
             '(link                              ((t (:foreground "#b8bb26" :overline t))))

             '(line-number                       ((t (:background "#32302f" :foreground "#665c54"))))
             ;; Mu4E mail client faces
             '(mu4e-header-face                  ((t (:foreground "#d5c4a1" :background "#282828"))))
             '(mu4e-replied-face                 ((t (:inherit mu4e-header-face :foreground "#b8bb26"))))
             '(mu4e-draft-face                   ((t (:inherit mu4e-header-face :foreground "#fabd2f"))))
             '(mu4e-link-face                    ((t (:inherit mu4e-face :foreground "#8ec07c" :underline t))))
             '(mu4e-forwarded-face               ((t (:inherit mu4e-header-face :foreground "#80c07c"))))
             '(mu4e-flagged-face                 ((t (:inherit mu4e-header-face))))
             '(mu4e-header-highlight-face        ((t (:underline nil :background "#3c3836"))))
             '(mu4e-unread-face                  ((t (:foreground "#fbf1c7" :weight bold))))  ;; Originally #83a598
             '(mu4e-cited-1-face                 ((t (:foreground "#458588" :slant italic))))
             '(mu4e-cited-2-face                 ((t (:foreground "#689d6a" :slant italic))))
             '(mu4e-cited-3-face                 ((t (:foreground "#98971a" :slant italic))))
             '(mu4e-cited-4-face                 ((t (:foreground "#d79921" :slant italic))))
             '(mu4e-cited-5-face                 ((t (:foreground "#d65d0e" :slant italic))))
             '(mu4e-cited-6-face                 ((t (:foreground "#cc241d" :slant italic))))
             '(mu4e-cited-7-face                 ((t (:foreground "#b16286" :slant italic))))
             '(mu4e-cited-8-face                 ((t (:foreground "#458588" :slant italic))))
             '(mu4e-cited-9-face                 ((t (:foreground "#689d6a" :slant italic))))
             '(mu4e-cited-10-face                 ((t (:foreground "#98971a" :slant italic))))
             '(mu4e-cited-11-face                 ((t (:foreground "#d79921" :slant italic))))
             '(mu4e-cited-12-face                 ((t (:foreground "#d65d0e" :slant italic))))
             '(mu4e-cited-13-face                 ((t (:foreground "#cc241d" :slant italic))))
             '(mu4e-cited-14-face                 ((t (:foreground "#b16286" :slant italic))))
             '(pdf-view-midnight-colors           '("#d5c4a1" . "#282828"))
             )
            (setq org-n-level-faces 8)
          )
        )
      (add-hook 'after-load-theme-hook 'customize-gruvbox)
      )
      (load-theme 'gruvbox t)
      (enable-theme 'gruvbox)
    )
#+end_src

** Org-Roam
#+begin_src emacs-lisp :tangle yes
  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory (file-truename "~/Projects/Roam/"))
    :config
    (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-db-autosync-mode))
    (bb-leader-key 
      "o r" '(:ignore t :wk "org-roam")
      "o r b" '(org-roam-buffer-toggle :wk "Toggle buffer")
      "o r f" '(org-roam-node-find :wk "Find node")
      "o r g" '(org-roam-graph :wk "Graph")
      "o r i" '(org-roam-node-insert :wk "Insert node")
      "o r c" '(org-roam-capture :wk "Capture")
      "o r d" '(org-roam-dailies-capture-today :wk "daily note")
      )
#+end_src

** Org Excalidraw
#+begin_src  emacs-lisp :tangle yes
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name
        "straight/repos/straight.el/bootstrap.el"
        (or (bound-and-true-p straight-base-dir)
            user-emacs-directory)))
      (bootstrap-version 7))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))


(use-package org-excalidraw
  :straight (:type git :host github :repo "wdavew/org-excalidraw")
  :config
  (org-excalidraw-directory "~/Projects/Excalidraw")
)
#+end_src

* WHICH-KEY
#+begin_src emacs-lisp :tangle yes
  (use-package which-key
    :ensure t
    :init
      (which-key-mode 1)
    :config
    (setq which-key-side-window-location 'bottom
  	  which-key-sort-order #'which-key-key-order-alpha
  	  which-key-sort-uppercase-first nil
  	  which-key-add-column-padding 1
  	  which-key-max-display-columns nil
  	  which-key-min-display-lines 6
  	  which-key-side-window-slot -10
  	  which-key-side-window-max-height 0.25
  	  which-key-idle-delay 0.8
  	  which-key-max-description-length 25
  	  which-key-allow-imprecise-window-fit t
  	  which-key-separator " → " ))
#+end_src

* SUDO EDIT
#+begin_src emacs-lisp :tangle yes
    (use-package sudo-edit
    :ensure t
    :config
  (bb-leader-key
    "b u" '(sudo-edit-find-file :wk "Sudo edit find file")
    "b U" '(sudo-edit :wk "Sudo edit file")))
#+end_src

* Vertico and Friends
Not sure why I did this??

** Vertico

#+begin_src emacs-lisp :tangle yes
      (use-package vertico
    :ensure t
        :init
        (vertico-mode))
      (use-package savehist
        :init
        (savehist-mode))
    (use-package emacs
      :custom
  (enable-recursive-minibuffers t)
  (read-extended-command-predicate #'command-completion-default-include-p)
  (minibuffer-prompt-properties
   '(read-only t cursor-intangible t face minibuffer-prompt)))
#+end_src
** Orderless
#+begin_src emacs-lisp :tangle yes
(use-package orderless
    :ensure t
:custom
(completion-styles '(orderless basic))
(completion-category-defaults nil)
(completion-category-overrides '((file (styles partial-completion)))))
#+end_src
** Marginalia
Using default config from [marginalia github](https://github.com/minad/marginalia)
#+begin_src emacs-lisp :tangle yes
;; Enable rich annotations using the Marginalia package
(use-package marginalia
    :ensure t
  ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
  ;; available in the *Completions* buffer, add it to the
  ;; `completion-list-mode-map'.
  :bind (:map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init section is always executed.
  :init

  ;; Marginalia must be activated in the :init section of use-package such that
  ;; the mode gets enabled right away. Note that this forces loading the
  ;; package.
  (marginalia-mode))
#+end_src
** Embark
#+begin_src emacs-lisp :tangle yes
    (use-package embark
      :ensure t
      :bind
      (("C-." . embark-act)
       ("C-;" . embark-dwim)
       ("C-h B" . embark-bindings))
      :init
      (setq prefix-help-command #'embark-prefix-help-command)
      :config
      (add-to-list 'display-buffer-alist
    	       '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
    		 nil
    		 (window-parameters (mode-line-format . none)))))

  (use-package embark-consult
    :ensure t
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src
* Languages
** Lsp-mode
*** Company mode
Code completion via company
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :hook (lspce-mode . company-mode)
    :custom
    (company-idle-delay 0.2)
    (company-minimum-prefix-length 1)
    (company-selection-wrap-around t))
#+end_src
*** Flycheck
Linting via flycheck
#+begin_src emacs-lisp
(use-package flycheck
    :ensure t
  :hook (lspce-mode . flycheck-mode)
  :config
  ;; For LSPCE integration (if needed)
  (setq flycheck-checker-error-threshold 1000)
  ;; Customize appearance
  (setq flycheck-indication-mode 'left-fringe))
#+end_src

*** LSPCE Setup

LSPCE (LSP Client for Emacs) provides a lightweight, fast, and non-intrusive LSP client implementation.
#+begin_src emacs-lisp
  ;; Install LSPCE
  (use-package lspce
    :ensure t
    :commands lspce-mode
    :custom
    ;; Performance tuning
    (lspce-connect-timeout 5)
    (lspce-send-changes-idle-time 0.5)
    (lspce-completion-trigger-characters '("." ":" ">" "<" "#" "/" "@" "*" "'" "\"" "," "&"))

    ;; Log settings (enable for debugging)
    ;; (lspce-log-io t)
    ;; (lspce-log-max message-log-max)

    ;; Integration with existing packages
    :hook
    ((lspce-mode . company-mode)
     (lspce-mode . flycheck-mode)
     ;; Optional: Enable eldoc for documentation in the minibuffer
     (lspce-mode . eldoc-mode))

    :config
    ;; Function to start LSPCE when opening a file
    (defun my/setup-lspce ()
      "Set up LSPCE for the current buffer if a suitable server is available."
      (let ((file-name (buffer-file-name)))
        (when file-name
          ;; Only enable in actual files, not special buffers
          (when (and (not (string-match-p "^ ?\\*" (buffer-name)))
                     (file-exists-p file-name))
            (lspce-mode 1)))))

    ;; Use direnv-provided server executables
    (setq lspce-send-changes-idle-time 0.5)

    ;; Connect to existing language servers if available
    (setq lspce-server-programs
          '((rust-mode . ("rust-analyzer"))
            (rustic-mode . ("rust-analyzer"))
            (python-mode . ("pyright-langserver" "--stdio"))
            (typescript-mode . ("typescript-language-server" "--stdio"))
            (typescript-tsx-mode . ("typescript-language-server" "--stdio"))
            (js-mode . ("typescript-language-server" "--stdio"))
            (js2-mode . ("typescript-language-server" "--stdio"))
            (web-mode . ("typescript-language-server" "--stdio"))
            (go-mode . ("gopls"))
            (c-mode . ("clangd"))
            (c++-mode . ("clangd"))
            (c++-ts-mode . ("clangd"))
            (c-ts-mode . ("clangd"))
            (haskell-mode . ("haskell-language-server-wrapper" "--lsp"))
            (nix-mode . ("nil"))
            (elixir-mode . ("elixir-ls"))
            (terraform-mode . ("terraform-ls" "serve"))
            (lua-mode . ("lua-language-server"))
            (zig-mode . ("zls"))
            (yaml-mode . ("yaml-language-server" "--stdio"))))

    ;; Key bindings - use spacemacs-like keybindings under C-c l prefix
    :bind (:map lspce-mode-map
                ("C-c l d" . lspce-find-definition)
                ("C-c l D" . lspce-find-declaration)
                ("C-c l r" . lspce-find-references)
                ("C-c l i" . lspce-find-implementation)
                ("C-c l t" . lspce-find-type-definition)
                ("C-c l h" . lspce-describe-thing-at-point)
                ("C-c l R" . lspce-rename)
                ("C-c l f" . lspce-format-buffer)
                ("C-c l a" . lspce-code-actions)
                ("C-c l s" . lspce-workspace-symbol)
                ("C-c l S" . lspce-document-symbol)
                ("C-c l l" . lspce-lens)
                ("C-c l =" . lspce-format)
                ;; Toggles
                ("C-c l T h" . lspce-toggle-highlight)
                ("C-c l T l" . lspce-toggle-lens)
                ("C-c l T L" . lspce-toggle-log)))
#+end_src

**** Auto-Enable LSPCE in Programming Modes
Enable LSPCE automatically for various programming modes:

#+begin_src emacs-lisp
  ;; Auto-enable LSPCE in programming modes
  ;;(add-hook 'rust-mode-hook #'lspce-mode)
  ;;(add-hook 'rustic-mode-hook #'lspce-mode)
  ;;;;(add-hook 'python-mode-hook #'lspce-mode)
  ;;(add-hook 'go-mode-hook #'lspce-mode)
  ;;(add-hook 'c-mode-hook #'lspce-mode)
  ;;(add-hook 'c++-mode-hook #'lspce-mode)
  ;;(add-hook 'typescript-mode-hook #'lspce-mode)
  ;;(add-hook 'js-mode-hook #'lspce-mode)
  ;;(add-hook 'js2-mode-hook #'lspce-mode)
  ;;(add-hook 'web-mode-hook
    ;;(lambda ()
      ;; Only enable LSPCE for web-mode files that would benefit from TypeScript LSP
      ;;(when (or (string-match-p "\\.tsx\\'" (buffer-file-name))
                ;;(string-match-p "\\.jsx\\'" (buffer-file-name))
                ;;(string-match-p "\\.ts\\'" (buffer-file-name))
                ;;(string-match-p "\\.js\\'" (buffer-file-name)))
        ;;(lspce-mode))))
  ;;(add-hook 'nix-mode-hook #'lspce-mode)
  ;; Add more hooks for other languages you use
#+end_src

**** Direnv Integration for Flake-based LSP Servers
Ensure LSPCE works correctly with your per-project LSP servers:

#+begin_src emacs-lisp
  ;; Enable direnv integration
  (use-package direnv
    :ensure t
    :config
    ;; Update environment when switching projects
    (direnv-mode)

    ;; Automatically update LSPCE when environment changes
    ;;(defun my/direnv-update-lspce ()
      "Update LSPCE after direnv updates the environment."
      ;;(when lspce-mode
        ;;(lspce-mode -1)
        ;;(lspce-mode 1)))

    ;;(add-hook 'direnv-mode-hook #'my/direnv-update-lspce)

    ;; Optional: reduce noise from direnv in minibuffer
    (setq direnv-always-show-summary nil))
#+end_src

**** Enhanced Flycheck & Company Integration
Fine-tune these integrations for better LSP experience:

#+begin_src emacs-lisp
  ;; Company mode configuration for LSPCE
 ;; (use-package company
  ;;  :ensure t
   ;; :after lspce
    ;;:hook (lspce-mode . company-mode)
    ;; :custom
    ;;(company-idle-delay 0.1)
    ;;(company-minimum-prefix-length 1)
    ;; Don't use company for comments
    ;;(company-dabbrev-code-everywhere t)
    ;;(company-dabbrev-code-modes t)
    ;;(company-dabbrev-code-other-buffers 'all)
    ;;(company-tooltip-align-annotations t)
    ;;;; Allow typing without selecting a completion
    ;;(company-require-match nil)
    ;; Show documentation popup for LSP items
    ;;(company-frontends
     ;;'(company-pseudo-tooltip-frontend
       ;;company-echo-metadata-frontend))
    ;;:config
    ;; Improve company UI
    ;;(with-eval-after-load 'company
      ;;(define-key company-active-map (kbd "C-n") #'company-select-next)
      ;;(define-key company-active-map (kbd "C-p") #'company-select-previous)))

  ;; Flycheck configuration for LSPCE
  ;;(use-package flycheck
    ;;:ensure t
    ;;:after lspce
    ;;:hook (lspce-mode . flycheck-mode)
    ;;:custom
    ;;(flycheck-check-syntax-automatically '(save mode-enabled idle-change))
    ;;(flycheck-idle-change-delay 0.5)
    ;; Increase threshold to handle large LSP responses
    ;;(flycheck-checker-error-threshold 1000)
    ;;:config
    ;; Use left fringe for indicators
    ;;(setq flycheck-indication-mode 'left-fringe)

    ;; Customize flycheck UI
    ;;(when (fboundp 'define-fringe-bitmap)
      ;;(define-fringe-bitmap 'flycheck-fringe-bitmap-double-arrow
        ;;[0 0 0 0 0 16 56 124 254 124 56 16 0 0 0 0]))

    ;; Better error highlight faces
    ;;(set-face-attribute 'flycheck-error nil :underline '(:style wave :color "#ff6c6b"))
    ;;(set-face-attribute 'flycheck-warning nil :underline '(:style wave :color "#ECBE7B"))
    ;;(set-face-attribute 'flycheck-info nil :underline '(:style wave :color "#98be65")))
#+end_src

**** Additional LSP Support Features
Extra features to enhance your LSP development experience:

#+begin_src emacs-lisp
  ;; Add which-key descriptions for LSP key bindings
  ;;(with-eval-after-load 'which-key
    ;;(which-key-add-key-based-replacements
      ;;"C-c l" "lsp"
      ;;"C-c l d" "definition"
      ;;"C-c l r" "references"
      ;;"C-c l h" "help/documentation"
      ;;"C-c l a" "code-actions"
      ;;"C-c l R" "rename"
      ;;"C-c l f" "format"
      ;;"C-c l T" "toggle options"))

  ;; Add helpful info for Embark
  ;;(with-eval-after-load 'embark
    ;;(defun embark-which-lspce-action (_target)
      ;;(when (and (bound-and-true-p lspce-mode)
                 ;;(symbol-at-point))
        ;;:lspce-symbol-action))

    ;;(add-to-list 'embark-classifiers #'embark-which-lspce-action)

    ;;(embark-define-keymap embark-lspce-symbol-action-map
      ;;"LSP commands for the current symbol."
      ;;("d" lspce-find-definition)
      ;;("r" lspce-find-references)
      ;;("i" lspce-find-implementation)
      ;;("t" lspce-find-type-definition)
      ;;("a" lspce-code-actions)
      ;;("R" lspce-rename))

    ;;(add-to-list 'embark-keymap-alist '(:lspce-symbol-action . embark-lspce-symbol-action-map)))

  ;; Function to restart lspce if it gets stuck
  ;;(defun my/lspce-restart ()
    ;;"Restart LSPCE in the current buffer."
    ;;(interactive)
    ;;(when lspce-mode
      ;;(lspce-mode -1)
      ;;(sit-for 0.5)
      ;;(lspce-mode 1)
      ;;(message "LSPCE restarted")))
      ;;
  ;; Add to keymap
  ;;(define-key lspce-mode-map (kbd "C-c l q") #'my/lspce-restart)
  ;;(with-eval-after-load 'which-key
    ;;(which-key-add-key-based-replacements "C-c l q" "restart-lsp"))
#+end_src

**** Support for Multi-root Workspaces
Useful if you work with monorepos or complex project structures:

#+begin_src emacs-lisp
  ;; Handle projects with multiple roots (monorepos)
  ;; This helps LSPCE understand project structure better
  ;;(defun my/lspce-guess-project-root ()
    ;;"Guess the project root for LSPCE."
    ;;(or
     ;; Try to find project root from common markers
     ;;(locate-dominating-file
      ;;default-directory
      ;;(lambda (dir)
        ;;(cl-find-if (lambda (marker) (file-exists-p (expand-file-name marker dir)))
                   ;;'("flake.nix" ".git" "go.mod" "Cargo.toml" "package.json"
                     ;;"setup.py" "pyproject.toml" "Makefile" "compile_commands.json"))))
     ;;;; Fallback to the current directory
     ;;default-directory))

  ;; Set function to find project root
  ;;(setq lspce-project-root-function #'my/lspce-guess-project-root)
#+end_src

**** Visual Improvements (Optional)
Add these for a better visual experience with LSP:

#+begin_src emacs-lisp
  ;; Visual enhancements for LSP (symbol highlighting, etc.)
  ;;(use-package lsp-ui-like-for-lspce
    ;;:ensure nil  ;; This is a custom package you'd need to create
    ;;:after lspce
    ;;:config
    ;;;; Function to highlight symbol at point
    ;;(defun my/lspce-highlight-symbol-at-point ()
      ;;"Highlight all occurrences of symbol at point."
      ;;(interactive)
      ;;(when (and lspce-mode (symbol-at-point))
        ;;(let ((symbol (thing-at-point 'symbol t)))
          ;;(unhighlight-regexp t)  ;; Clear previous highlights
          ;;(when symbol
            ;;(highlight-regexp (concat "\\_<" (regexp-quote symbol) "\\_>"))))))

    ;; Enable symbol highlighting on cursor movement
    ;;(defvar my/lspce-highlight-timer nil)
    ;;(defun my/lspce-setup-highlight ()
      ;;(when my/lspce-highlight-timer
        ;;(cancel-timer my/lspce-highlight-timer))
      ;;(setq my/lspce-highlight-timer
            ;;(run-with-idle-timer 0.5 t #'my/lspce-highlight-symbol-at-point)))

    ;; Toggle function
    ;;(defun my/lspce-toggle-highlight ()
      ;;"Toggle symbol highlighting."
      ;;(interactive)
      ;;(if my/lspce-highlight-timer
          ;;(progn
            ;;(cancel-timer my/lspce-highlight-timer)
            ;;(setq my/lspce-highlight-timer nil)
            ;;(unhighlight-regexp t)
            ;;(message "Symbol highlighting disabled"))
        ;;(my/lspce-setup-highlight)
        ;;(message "Symbol highlighting enabled")))

    ;; Add to LSPCE keymap
    ;;(define-key lspce-mode-map (kbd "C-c l T h") #'my/lspce-toggle-highlight)

    ;; Enable by default
    ;;(add-hook 'lspce-mode-hook #'my/lspce-setup-highlight))
#+end_src
** Treesitter
automatically install all treesitter grammers
#+begin_src emacs-lisp
  (use-package treesit-auto
    :ensure t
    (treesit-auto-install t)
    :config
    (treesit-auto-add-to-auto-mode-alist 'all)
    (global-treesit-auto-mode))
#+end_src
** Nix
#+begin_src emacs-lisp :tangle yes
(use-package nix-mode
    :ensure t
  :mode "\\.nix\\'")
#+end_src
