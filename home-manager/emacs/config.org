#+TITLE: Just an Emacs Config
#+AUTHOR: Izaac
#+DESCRIPTION: Yoinked from DT's personal Emacs config. Built into this.
#+STARTUP: showeverything
#+OPTIONS: toc:2

* TABLE OF CONTENTS :toc:
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#load-evil-mode][Load Evil Mode]]
  - [[#general-keybindings][General Keybindings]]
- [[#fonts][FONTS]]
- [[#graphical-user-interface-tweaks][GRAPHICAL USER INTERFACE TWEAKS]]
  - [[#gruvbox-theme][Gruvbox Theme]]
  - [[#disable-menubar-toolbars-and-scrollbars][Disable Menubar, Toolbars and Scrollbars]]
  - [[#display-line-numbers-and-truncated-lines][Display Line Numbers and Truncated Lines]]
- [[#org-mode][ORG MODE]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#org-tempo-better-src-block-input][Org Tempo (better src block input)]]
  - [[#org-mode-indent-fix][Org mode indent fix]]
  - [[#better-gruvbox-org-mode][Better gruvbox org mode]]
- [[#which-key][WHICH-KEY]]
- [[#sudo-edit][SUDO EDIT]]
- [[#languages][Languages]]
  - [[#nix][Nix]]

* IMPORTANT PROGRAMS TO LOAD FIRST
** Load Evil Mode
#+begin_src emacs-lisp
(use-package evil
    :init      ;; tweak evil's configuration before loading it
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (evil-mode))
  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer))
    (evil-collection-init))
#+end_src

** General Keybindings

#+begin_src emacs-lisp
    (use-package general
      :config
      (general-evil-setup)

      ;; set up 'SPC' as the global leader key
      (general-create-definer bb/leader-keys
	:states '(normal insert visual emacs)
	:keymaps 'override
	:prefix "SPC" ;; set leader
	:global-prefix "M-SPC") ;; access leader in insert mode

      (bb/leader-keys
	"." '(find-file :wk "Find File")
	"TAB TAB" '(comment-line :wk "Comment Lines"))

      (bb/leader-keys
	"b" '(:ignore t :wk "buffer")
	"b b" '(switch-to-buffer :wk "Switch buffer")
	"b i" '(ibuffer :wk "Ibuffer")
	"b k" '(kill-this-buffer :wk "Kill this buffer")
	"b n" '(next-buffer :wk "Next buffer")
	"b p" '(previous-buffer :wk "Previous buffer")
	"b r" '(revert-buffer :wk "Reload buffer"))

      (bb/leader-keys
	"e" '(:ignore t :wk "Eval")
	"e b" '(eval-buffer :wk "Eval elisp in buffer")
	"e d" '(eval-defun :wk "Eval defun containing or after point")
	"e e" '(eval-expression :wk "Eval and elisp expression")
	"e l" '(eval-last-sexp :wk "Eval elisp expression before point")
	"e r" '(eval-region :wk "Eval elisp in region"))

    (bb/leader-keys
    "h" '(:ignore t :wk "Help")
    "h f" '(describe-function :wk "Describe function")
    "h v" '(describe-variable :wk "Describe variable"))
  )
#+end_src


* FONTS
Defining the various fonts that Emacs will use.

#+begin_src emacs-lisp
  (set-face-attribute 'default nil
    :font "Lekton Nerd Font"
    :height 110
    :weight 'medium)
  (set-face-attribute 'variable-pitch nil
    :font "NotoSans NF SemCond ExtLt"
    :height 130
    :weight 'extra-light)
  (set-face-attribute 'fixed-pitch nil
    :font "Lekton Nerd Font"
    :height 110
    :weight 'medium)
  ;; Makes commented text and keywords italics.
  ;; This is working in emacsclient but not emacs.
  ;; Your font must have an italic face available.
  (set-face-attribute 'font-lock-comment-face nil
    :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
    :slant 'italic)

  ;; This sets the default font on all graphical frames created after restarting Emacs.
  ;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
  ;; are not right unless I also add this method of setting the default font.
  (add-to-list 'default-frame-alist '(font . "NotoSans NF SemCond ExtLt"))

  ;; Uncomment the following line if line spacing needs adjusting.
  (setq-default line-spacing 0.12)

#+end_src


* GRAPHICAL USER INTERFACE TWEAKS
Let's make GNU Emacs look a little better.
** Gruvbox Theme
#+begin_src emacs-lisp
(use-package gruvbox-theme
  :ensure t
  :config
  (load-theme 'gruvbox-dark-hard t))
#+end_src

** Disable Menubar, Toolbars and Scrollbars
#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

** Display Line Numbers and Truncated Lines
#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(global-visual-line-mode t)
#+end_src
* ORG MODE
** Enabling Table of Contents
#+begin_src emacs-lisp
  (use-package toc-org
      :commands toc-org-enable
      :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Enabling Org Bullets
Org-bullets gives us attractive bullets rather than asterisks.

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Org Tempo (better src block input)
#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src

** Org mode indent fix
#+begin_src emacs-lisp
  (electric-indent-mode -1)
#+end_src

** Better gruvbox org mode
Stolen from [Thriveth](https://github.com/thriveth/Gruvbox-goodies/blob/master/Emacs/gruvbox-conf.el)
#+begin_src emacs-lisp
  (use-package gruvbox-theme
    :ensure nil
    :config
    (progn
      (defvar after-load-theme-hook nil
        "Hook run after a color theme is loaded using `load-theme'.")
      (defadvice load-theme (after run-after-load-theme-hook activate)
        "Run `after-load-theme-hook'."
        (run-hooks 'after-load-theme-hook))
      (defun customize-gruvbox ()
        "Customize gruvbox theme"
        (if (member 'gruvbox custom-enabled-themes)
            (custom-theme-set-faces
             'gruvbox
             '(cursor                 ((t (:foreground "#928374"))))
             '(org-block              ((t (:foreground "#ebdbb2":background "#1c2021" :extend t))))
             '(org-block-begin-line   ((t (:inherit org-block :background "#1d2021" :foreground "#665c54" :extend t))))
             '(org-block-end-line     ((t (:inherit org-block-begin-line))))
             '(org-document-info      ((t (:foreground "#d5c4a1" :weight bold))))
             '(org-document-info-keyword    ((t (:inherit shadow))))
             '(org-document-title     ((t (:foreground "#fbf1c7" :weight bold :height 1.4))))
             '(org-meta-line          ((t (:inherit shadow))))
             '(org-target             ((t (:height 0.7 :inherit shadow))))
             '(org-link               ((t (:foreground "#b8bb26" :background "#32302f" :overline nil))))  ;; 
             '(org-indent             ((t (:inherit org-hide))))
             '(org-indent             ((t (:inherit (org-hide fixed-pitch)))))
             '(org-footnote           ((t (:foreground "#8ec07c" :background "#32302f" :overline nil))))
             '(org-ref-cite-face      ((t (:foreground "#fabd2f" :background "#32302f" :overline nil))))  ;; 
             '(org-ref-ref-face       ((t (:foreground "#83a598" :background "#32302f" :overline nil))))
             '(org-ref-label-face     ((t (:inherit shadow :box t))))
             '(org-drawer             ((t (:inherit shadow))))
             '(org-property-value     ((t (:inherit org-document-info))) t)
             '(org-tag                ((t (:inherit shadow))))
             '(org-date               ((t (:foreground "#83a598" :underline t))))
             '(org-verbatim           ((t (:inherit org-block :background "#3c3836" :foreground "#d5c4a1"))))
             '(org-code               ((t (:inherit org-verbatim :background "#3c3836" :foreground "#fe8019"))))
             '(org-quote              ((t (:inherit org-block :slant italic))))
             '(org-level-1            ((t (:foreground "#83a598" :background "#282828" :weight bold :height 1.1 :overline nil :extend t)))) ;; Blue
             '(org-level-2            ((t (:foreground "#8ec07c" :background "#282828" :weight bold :height 1.1 :overline nil :extend t)))) ;; Aqua
             '(org-level-3            ((t (:foreground "#b8bb26" :background "#282828" :weight bold :height 1.1 :overline nil :extend t)))) ;; Green
             '(org-level-4            ((t (:foreground "#fabd2f" :background "#282828" :weight bold :height 1.1 :overline nil :extend t)))) ;; Yellow
             '(org-level-5            ((t (:foreground "#fe8019" :background "#282828" :weight bold :height 1.1 :overline nil :extend t)))) ;; Orange
             '(org-level-6            ((t (:foreground "#fb4934" :background "#282828" :weight bold :height 1.1 :overline nil :extend t)))) ;; Red
             '(org-level-7            ((t (:foreground "#d3869b" :background "#282828" :weight bold :height 1.1 :overline nil :extend t)))) ;; Blue
             '(org-headline-done      ((t (:foreground "#928374" :background "#282828" :weight bold :overline nil :extend t)))) ;; Gray
             '(org-ellipsis           ((t (:inherit shadow :height 1.0 :weight bold :extend t)))) 
             '(org-table              ((t (:foreground "#d5c4a1" :background "#3c3836"))))

             ;; Doom-modeline settings
             '(doom-modeline-evil-insert-state   ((t (:foreground "#b8bb26" :weight bold)))) ;; Green
             '(doom-modeline-evil-emacs-state    ((t (:foreground "#b16286" :weight bold)))) ;; Purple
             '(doom-modeline-evil-normal-state   ((t (:foreground "#83a598" :weight bold)))) ;; Blue
             '(doom-modeline-evil-visual-state   ((t (:foreground "#fbf1c7" :weight bold)))) ;; Beige
             '(doom-modeline-evil-replace-state  ((t (:foreground "#fb4934" :weight bold)))) ;; Red
             '(doom-modeline-evil-operator-state ((t (:foreground "#fabd2f" :weight bold)))) ;; Yellow
             '(mode-line                         ((t (:background "#504945" :foreground "#d5c4a1"))))
             '(mode-line-inactive                ((t (:background "#3c3836" :foreground "#7c6f64"))))
             '(link                              ((t (:foreground "#b8bb26" :overline t))))

             '(line-number                       ((t (:background "#32302f" :foreground "#665c54"))))
             ;; Mu4E mail client faces
             '(mu4e-header-face                  ((t (:foreground "#d5c4a1" :background "#282828"))))
             '(mu4e-replied-face                 ((t (:inherit mu4e-header-face :foreground "#b8bb26"))))
             '(mu4e-draft-face                   ((t (:inherit mu4e-header-face :foreground "#fabd2f"))))
             '(mu4e-link-face                    ((t (:inherit mu4e-face :foreground "#8ec07c" :underline t))))
             '(mu4e-forwarded-face               ((t (:inherit mu4e-header-face :foreground "#80c07c"))))
             '(mu4e-flagged-face                 ((t (:inherit mu4e-header-face))))
             '(mu4e-header-highlight-face        ((t (:underline nil :background "#3c3836"))))
             '(mu4e-unread-face                  ((t (:foreground "#fbf1c7" :weight bold))))  ;; Originally #83a598 
             '(mu4e-cited-1-face                 ((t (:foreground "#458588" :slant italic))))
             '(mu4e-cited-2-face                 ((t (:foreground "#689d6a" :slant italic))))
             '(mu4e-cited-3-face                 ((t (:foreground "#98971a" :slant italic))))
             '(mu4e-cited-4-face                 ((t (:foreground "#d79921" :slant italic))))
             '(mu4e-cited-5-face                 ((t (:foreground "#d65d0e" :slant italic))))
             '(mu4e-cited-6-face                 ((t (:foreground "#cc241d" :slant italic))))
             '(mu4e-cited-7-face                 ((t (:foreground "#b16286" :slant italic))))
             '(mu4e-cited-8-face                 ((t (:foreground "#458588" :slant italic))))
             '(mu4e-cited-9-face                 ((t (:foreground "#689d6a" :slant italic))))
             '(mu4e-cited-10-face                 ((t (:foreground "#98971a" :slant italic))))
             '(mu4e-cited-11-face                 ((t (:foreground "#d79921" :slant italic))))
             '(mu4e-cited-12-face                 ((t (:foreground "#d65d0e" :slant italic))))
             '(mu4e-cited-13-face                 ((t (:foreground "#cc241d" :slant italic))))
             '(mu4e-cited-14-face                 ((t (:foreground "#b16286" :slant italic))))
             '(pdf-view-midnight-colors           '("#d5c4a1" . "#282828"))
             )
            (setq org-n-level-faces 8)
          )
        )  
      (add-hook 'after-load-theme-hook 'customize-gruvbox)
      )
      (load-theme 'gruvbox t) 
      (enable-theme 'gruvbox)
    )
#+end_src

* WHICH-KEY
#+begin_src emacs-lisp
  (use-package which-key
    :init
      (which-key-mode 1)
    :config
    (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.8
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit t
	  which-key-separator " → " ))
#+end_src

* SUDO EDIT
#+begin_src emacs-lisp
  (use-package sudo-edit
  :config
  (bb/leader-keys
  "f u" (sudo-edit-find-file :wk "Sudo edit find file")
  "f U" (sudo-edit :wk "Sudo edit file")))
#+end_src

* Languages
** Nix
#+begin_src emacs-lisp
(use-package nix-mode
  :mode "\\.nix\\'")
#+end_src
